version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.1
  aws-ecs: circleci/aws-ecs@2.0.0
  pocket: pocket/circleci-orbs@1.2.0

# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  apollo:
    docker:
      - image: circleci/node:16
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: install rover
          command: |
            # download and install Rover
            curl -sSL https://rover.apollo.dev/nix/v0.1.0 | sh
            # This allows the PATH changes to persist to the next `run` step
            echo 'export PATH=$HOME/.rover/bin:$PATH' >> $BASH_ENV
      - run:
          name: check service
          command: rover subgraph check pocket-client-api@current --schema ./src/schema.graphql --name=related-content-api
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service
                command: rover subgraph publish pocket-client-api@current --schema ./src/schema.graphql --routing-url https://related-content-api.readitlater.com/graphql --name=related-content-api

  build:
    #Sets up the code for the docker image to build in
    #Other repos at Pocket use this to install modules and or compile the code.
    docker:
      - image: python:3.9
    steps:
      - checkout
      # Define the working directory for this job
      - attach_workspace:
          at: /tmp/workspace

      # Copy built files to app_prod folder
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            cp -r . /tmp/workspace/app_prod
      # Persist built files to workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod

  test_app:
    docker:
      - image: python:3.9
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    environment:
      WORKON_HOME: '~/.venv'
    parameters:
      pipenv_path:
        default: "./"
        type: string
    steps:
      - checkout
      - run:
          name: Build environment and install requirements
          command: |
            pip install pipenv
            pipenv install --dev
      - save_cache:
          key: deps-test-{{ checksum "<<parameters.pipenv_path>>Pipfile.lock" }}
          paths:
            - "~/.venv"
      - run:
          name: Run tests
          command: |
            cd src
            pipenv run pytest

workflows:
  all:
    jobs:
      - test_app:
          <<: *not_main
          context: pocket
# Not deploying this for now
#       - apollo:
#           context: pocket

      - build

      # Try building the ECS docker image on each branch
      - pocket/docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          repo-name: relatedcontentapi-dev-app
          ecr-url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
          push: false
          requires:
            - build

      # Build & Deploy the Dev Docker Image
      - pocket/docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codebuild-project-name: RelatedContentAPI-Dev
          codebuild-project-branch: dev
          repo-name: relatedcontentapi-dev-app
          ecr-url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
          push: true
          requires:
            - build

      # Dev
      - pocket/execute_codepipeline:
          <<: *only_dev
          context: pocket
          name: deploy_dev
          environment: Dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codepipeline-name: RelatedContentAPI-Dev-CodePipeline
          codebuild-project-name: RelatedContentAPI-Dev
          codebuild-project-branch: dev
          requires:
            - build_docker_dev

      # Build & Deploy the Prod Docker Image
      - pocket/docker_build:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codebuild-project-name: RelatedContentAPI-Prod
          codebuild-project-branch: main
          repo-name: relatedcontentapi-prod-app
          ecr-url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
          push: true
          requires:
            - build

      # Prod
      - pocket/execute_codepipeline:
          <<: *only_main
          context: pocket
          name: deploy_prod
          environment: Prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codepipeline-name: RelatedContentAPI-Prod-CodePipeline
          codebuild-project-name: RelatedContentAPI-Prod
          codebuild-project-branch: main
          requires:
            - build_docker_prod

      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: RelatedContentAPI

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: RelatedContentAPI

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/related-content-api
          sentry_project_name: related-content-api
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/related-content-api
          sentry_project_name: related-content-api
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_dev
